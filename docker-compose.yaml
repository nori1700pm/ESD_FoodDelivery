version: '3.8'

services:
  error-service:
    build: 
      context: ./backend/services
      dockerfile: error/Dockerfile
    ports:
      - "5003:5003"
    environment:
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - FIREBASE_CONFIG=${FIREBASE_CONFIG}
      - PORT=5003
      - PYTHONPATH=/app
    networks:
      - app-network
    depends_on:
      - rabbitmq

  pay-for-delivery:
    build: 
      context: ./backend/services
      dockerfile: pay-for-delivery/Dockerfile
    ports:
      - "5004:5004"
    environment:
      - orderURL=http://order-service:5001
      - walletURL=http://wallet-service:5002
      - errorURL=http://error-service:5003
      - customerURL=http://customer-service:4000
      - assignDriverURL=http://assign-driver:5006 
      - PORT=5004
      - PYTHONPATH=/app
    networks:
      - app-network
    depends_on:
      - wallet-service
      - rabbitmq

  wallet-service:
    build: 
      context: ./backend/services
      dockerfile: wallet/Dockerfile
    ports:
      - "5002:5002"
    environment:
      - DEBUG=false
      - PORT=5002
      - FIREBASE_CONFIG=${FIREBASE_CONFIG}
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672 
      - PYTHONPATH=/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5002/health"]
      interval: 30s
      timeout: 3s
      retries: 3
    restart: unless-stopped
    networks:
      - app-network
    depends_on:
      rabbitmq-init:
        condition: service_completed_successfully

  order-service:
    build:
      context: ./backend/services/order
      dockerfile: Dockerfile
    environment:
      - DEBUG=false
      - PORT=5001
      - FIREBASE_CONFIG=${FIREBASE_CONFIG}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 3s
      retries: 3
    restart: unless-stopped
    ports:
      - "5001:5001"
    networks:
      - app-network

  notification-service:
    build:
      context: ./backend/services
      dockerfile: notifications/Dockerfile
    environment:
      - DEBUG=false
      - PORT=6000
      - FIREBASE_CONFIG=${FIREBASE_CONFIG}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - PYTHONPATH=/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6000/health"]
      interval: 30s
      timeout: 3s
      retries: 3
    restart: unless-stopped
    ports:
      - "6000:6000"
    networks:
      - app-network
    depends_on:
      - rabbitmq


  customer-service:
    build:
      context: ./backend/services/customer
      dockerfile: Dockerfile
    ports:
      - "4000:4000"
    environment:
      - DEBUG=false
      - PORT=4000
      - FIREBASE_CONFIG=${FIREBASE_CONFIG}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 3s
      retries: 3
    restart: unless-stopped
    networks:
      - app-network
    depends_on:
      - rabbitmq

  deliver-food:
    build: 
      context: ./backend/services
      dockerfile: deliver-food/Dockerfile
    ports:
      - "5005:5005"
    environment:
      - DEBUG=false
      - PORT=5005
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - FIREBASE_CONFIG=${FIREBASE_CONFIG}
      - orderURL=http://order-service:5001
      - walletURL=http://wallet-service:5002
      - customerURL=http://customer-service:4000
      - PYTHONPATH=/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5005/health"]
      interval: 30s
      timeout: 3s
      retries: 3
    restart: unless-stopped
    networks:
      - app-network
    depends_on:
      - order-service
      - wallet-service
      - customer-service
      - rabbitmq

  assign-driver:
    build: 
      context: ./backend/services
      dockerfile: assign-driver/Dockerfile
    ports:
      - "5006:5006"
    environment:
      - DEBUG=false
      - PORT=5006
      - FIREBASE_CONFIG=${FIREBASE_CONFIG}
      - orderURL=http://order-service:5001
      - customerURL=http://customer-service:4000
      - PYTHONPATH=/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5006/health"]
      interval: 30s
      timeout: 3s
      retries: 3
    restart: unless-stopped
    networks:
      - app-network
    depends_on:
      order-service:
        condition: service_started
      customer-service:
        condition: service_started
      rabbitmq-init:
        condition: service_completed_successfully

  reject-delivery:
    build: 
      context: ./backend/services/reject-delivery
      dockerfile: Dockerfile
    ports:
      - "5008:5008"
    environment:
      - DEBUG=false
      - PORT=5008
      - FIREBASE_CONFIG=${FIREBASE_CONFIG}
      - orderURL=http://order-service:5001
      - driversURL=https://personal-shkrtsry.outsystemscloud.com/DriverServiceModule/rest/NomNomGo
      - assignDriverURL=http://assign-driver:5006
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5008/health"]
      interval: 30s
      timeout: 3s
      retries: 3
    restart: unless-stopped
    networks:
      - app-network
    depends_on:
      - order-service
      - assign-driver

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  rabbitmq-init:
    build:
      context: ./backend/services/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: on-failure
    environment:
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
    networks:
      - app-network
    command: ["python", "amqp_setup.py"]
    depends_on:
      - rabbitmq

  kong-database:
      image: postgres:17.4
      platform: linux/amd64  # <- required for Mac M1 chip. Otherwise, can remove
      restart: always
      networks:
        - app-network
      environment:
        POSTGRES_DB: kong
        POSTGRES_USER: kong
        POSTGRES_PASSWORD: password
      ports:
        - "5432:5432"
      healthcheck:
        test: ["CMD", "pg_isready", "-U", "kong"]
        interval: 10s
        timeout: 5s
        retries: 5
      volumes:
        - pgdata:/var/lib/postgresql/data

  #######################################
  # Kong database migration
  #######################################
  kong-migration:
    image: kong/kong-gateway:3.9
    platform: linux/amd64  # <- required for Mac M1 chip. Otherwise, can remove
    command: "kong migrations bootstrap"
    restart: on-failure
    networks:
      - app-network
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: password
    depends_on:
      - kong-database

  #######################################
  # Kong: The API Gateway
  #######################################
  kong:
    image: kong/kong-gateway:3.9
    platform: linux/amd64  # <- required for Mac M1 chip. Otherwise, can remove
    restart: always
    networks:
      - app-network
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: password
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_GUI_URL: http://localhost:8002
    depends_on:
      - kong-migration
    ports: # https://docs.konghq.com/gateway/latest/production/networking/default-ports/
      - "8000:8000" # Takes incoming HTTP traffic from Consumers, and forwards it to upstream Services.
      - "8001:8001" # Admin API. Listens for calls from the command line over HTTP.
      - "8002:8002" # Kong Manager (GUI). Listens for HTTP traffic.

networks:
  app-network:
    driver: bridge

volumes:
  pgdata:

